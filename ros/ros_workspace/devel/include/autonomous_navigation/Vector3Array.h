// Generated by gencpp from file autonomous_navigation/Vector3Array.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_NAVIGATION_MESSAGE_VECTOR3ARRAY_H
#define AUTONOMOUS_NAVIGATION_MESSAGE_VECTOR3ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace autonomous_navigation
{
template <class ContainerAllocator>
struct Vector3Array_
{
  typedef Vector3Array_<ContainerAllocator> Type;

  Vector3Array_()
    : vectors()  {
    }
  Vector3Array_(const ContainerAllocator& _alloc)
    : vectors(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _vectors_type;
  _vectors_type vectors;





  typedef boost::shared_ptr< ::autonomous_navigation::Vector3Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_navigation::Vector3Array_<ContainerAllocator> const> ConstPtr;

}; // struct Vector3Array_

typedef ::autonomous_navigation::Vector3Array_<std::allocator<void> > Vector3Array;

typedef boost::shared_ptr< ::autonomous_navigation::Vector3Array > Vector3ArrayPtr;
typedef boost::shared_ptr< ::autonomous_navigation::Vector3Array const> Vector3ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_navigation::Vector3Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_navigation::Vector3Array_<ContainerAllocator1> & lhs, const ::autonomous_navigation::Vector3Array_<ContainerAllocator2> & rhs)
{
  return lhs.vectors == rhs.vectors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_navigation::Vector3Array_<ContainerAllocator1> & lhs, const ::autonomous_navigation::Vector3Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_navigation::Vector3Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_navigation::Vector3Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_navigation::Vector3Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e70d69b80b6619295db7fb48376314f";
  }

  static const char* value(const ::autonomous_navigation::Vector3Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e70d69b80b66192ULL;
  static const uint64_t static_value2 = 0x95db7fb48376314fULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_navigation/Vector3Array";
  }

  static const char* value(const ::autonomous_navigation::Vector3Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Vector3Array.msg\n"
"# Un mensaje que contiene un arreglo de geometry_msgs/Vector3\n"
"\n"
"geometry_msgs/Vector3[] vectors\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autonomous_navigation::Vector3Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vectors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vector3Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_navigation::Vector3Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_navigation::Vector3Array_<ContainerAllocator>& v)
  {
    s << indent << "vectors[]" << std::endl;
    for (size_t i = 0; i < v.vectors.size(); ++i)
    {
      s << indent << "  vectors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.vectors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_NAVIGATION_MESSAGE_VECTOR3ARRAY_H
